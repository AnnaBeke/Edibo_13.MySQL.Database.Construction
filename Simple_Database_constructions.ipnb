{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN7L8dVXiMpcRQDs5EHz/kT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AnnaBeke/Edibo_13.MySQL.Database.Construction/blob/main/Simple_Database_constructions.ipnb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dUTU_9KjHdd9"
      },
      "source": [
        "# MySQL: Simple Database constructions.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ayCdA352DhBx"
      },
      "source": [
        "##MySQL: BETWEEN Condition\n",
        "###Description\n",
        "\n",
        "The MySQL BETWEEN Condition is used to retrieve values within a range in a SELECT, INSERT, UPDATE, or DELETE statement.\n",
        "\n",
        "###Syntax:\n",
        "expression BETWEEN value1 AND value2;\n",
        "\n",
        "where:\n",
        "-expression is a column or calculation.\n",
        "-value1 and value2-These values create an inclusive range that expression is compared to.\n",
        "\n",
        "###Note\n",
        "\n",
        "The MySQL BETWEEN Condition will return the records where expression is within the range of value1 and value2 (inclusive).\n",
        "When using the MySQL BETWEEN Condition with dates, be sure to use the CAST function to explicitly convert the values to dates.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4mZ6ylq9EB14"
      },
      "source": [
        "#EXAMPLE:\n",
        "SELECT *\n",
        "FROM contacts\n",
        "WHERE contact_id BETWEEN 100 AND 200;\n",
        "\n",
        "#is equivalent to:\n",
        "\n",
        "SELECT *\n",
        "FROM contacts\n",
        "WHERE contact_id >= 100\n",
        "AND contact_id <= 200;"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KEQwIBotEO4X"
      },
      "source": [
        "#EXAMPLE WITH DATE:\n",
        "SELECT *\n",
        "FROM order_details\n",
        "WHERE order_date BETWEEN CAST('2014-02-01' AS DATE) AND CAST('2014-02-28' AS DATE);\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wNsDwOgOESPx"
      },
      "source": [
        "#EXAMPLE WITH NOT OPERATOR:\n",
        "SELECT *\n",
        "FROM suppliers\n",
        "WHERE supplier_id NOT BETWEEN 2000 AND 2999;"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xQDOY7WPEfqf"
      },
      "source": [
        "##MySQL: Combining the AND and OR Conditions\n",
        "\n",
        "###Description\n",
        "\n",
        "The MySQL AND condition and OR condition can be combined in a SELECT, INSERT, UPDATE, or DELETE statement.\n",
        "\n",
        "###Syntax:\n",
        "\n",
        "WHERE condition1\n",
        "AND condition2\n",
        "...\n",
        "OR condition_n;\n",
        "\n",
        "Where:\n",
        "-condition1, condition2, ... condition_n\n",
        "The conditions that are evaluated to determine if the records will be selected."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "omGE9KbFEtT1"
      },
      "source": [
        "#EXAMPLE:\n",
        "SELECT *\n",
        "FROM customers\n",
        "WHERE (state = 'California' AND last_name = 'Johnson')\n",
        "OR (customer_id > 4500);\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ggrCOo2zEuy1"
      },
      "source": [
        "#EXAMPLE:\n",
        "SELECT customer_id, last_name, first_name\n",
        "FROM customers\n",
        "WHERE (last_name = 'Johnson')\n",
        "OR (last_name = 'Anderson' AND state = 'California')\n",
        "OR (last_name = 'Smith' AND status = 'Active' AND state = 'Florida');"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZJfH5ZGZEyZ8"
      },
      "source": [
        "#EXAMPLE:\n",
        "DELETE FROM contacts\n",
        "WHERE state = 'California'\n",
        "AND (last_name = 'Smith' OR last_name = 'Anderson');"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ptQH9iYkE5I0"
      },
      "source": [
        "##MySQL: Joins\n",
        "\n",
        "MySQL JOINS are used to retrieve data from multiple tables. A MySQL JOIN is performed whenever two or \n",
        "more tables are joined in a SQL statement.\n",
        "\n",
        "###There are different types of MySQL joins:\n",
        "\n",
        "MySQL INNER JOIN (or sometimes called simple join)\n",
        "\n",
        "MySQL LEFT OUTER JOIN (or sometimes called LEFT JOIN)\n",
        "\n",
        "MySQL RIGHT OUTER JOIN (or sometimes called RIGHT JOIN)\n",
        "\n",
        "###Syntax:\n",
        "SELECT columns\n",
        "\n",
        "FROM table1 \n",
        "\n",
        "INNER JOIN table2\n",
        "\n",
        "ON table1.column = table2.column;"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xV9HsxnlFb1u"
      },
      "source": [
        "#EXAMPLE:\n",
        "SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date\n",
        "FROM suppliers \n",
        "INNER JOIN orders\n",
        "ON suppliers.supplier_id = orders.supplier_id;\n",
        "\n",
        "#  This MySQL INNER JOIN example would return all rows from the suppliers and orders tables where there is \n",
        "#  a matching supplier_id value in both the suppliers and orders tables."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vd-83qRJGH1P"
      },
      "source": [
        "##LEFT OUTER JOIN\n",
        "\n",
        "Another type of join is called a MySQL LEFT OUTER JOIN. This type of join returns all rows from the \n",
        "LEFT-hand table specified in the ON condition and only those rows from the other table where the joined \n",
        "fields are equal (join condition is met).\n",
        "\n",
        "In some databases, the LEFT OUTER JOIN keywords are replaced with LEFT JOIN.\n",
        "\n",
        "###Syntax:\n",
        "SELECT columns\n",
        "\n",
        "FROM table1\n",
        "\n",
        "LEFT [OUTER] JOIN table2\n",
        "\n",
        "ON table1.column = table2.column;"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XMCMaTfUGSdd"
      },
      "source": [
        "#EXAMPLE:\n",
        "SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date\n",
        "FROM suppliers\n",
        "LEFT JOIN orders\n",
        "ON suppliers.supplier_id = orders.supplier_id;\n",
        "\n",
        "#   This LEFT OUTER JOIN example would return all rows from the suppliers table and only \n",
        "#   those rows from the orders table where the joined fields are equal.\n",
        "#   If a supplier_id value in the suppliers table does not exist in the orders table, \n",
        "#   all fields in the orders table will display as <null> in the result set."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q6Hif8N9GaMU"
      },
      "source": [
        "##RIGHT OUTER JOIN\n",
        "\n",
        "Another type of join is called a MySQL RIGHT OUTER JOIN. This type of join returns all rows \n",
        "from the RIGHT-hand table specified in the ON condition and only those rows from the other table \n",
        "where the joined fields are equal (join condition is met).\n",
        "\n",
        "In some databases, the RIGHT OUTER JOIN keywords are replaced with RIGHT JOIN.\n",
        "\n",
        "###Syntax:\n",
        "SELECT columns\n",
        "\n",
        "FROM table1\n",
        "\n",
        "RIGHT [OUTER] JOIN table2\n",
        "\n",
        "ON table1.column = table2.column;\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G6X4BBn4GjfU"
      },
      "source": [
        "#EXAMPLE:\n",
        "SELECT orders.order_id, orders.order_date, suppliers.supplier_name\n",
        "FROM suppliers\n",
        "RIGHT JOIN orders\n",
        "ON suppliers.supplier_id = orders.supplier_id;\n",
        "\n",
        "#   This RIGHT OUTER JOIN example would return all rows from the orders table and only those rows \n",
        "#   from the suppliers table where the joined fields are equal.\n",
        "#   If a supplier_id value in the orders table does not exist in the suppliers table, \n",
        "#   all fields in the suppliers table will display as <null> in the result set."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1wlSzgBsGsF6"
      },
      "source": [
        "##MySQL: UNION Operator\n",
        "###Description\n",
        "\n",
        "The MySQL UNION operator is used to combine the result sets of 2 or more SELECT statements. \n",
        "\n",
        "It removes duplicate rows between the various SELECT statements.\n",
        "\n",
        "Each SELECT statement within the UNION operator must have the same number of fields in the result sets with similar data types.\n",
        "\n",
        "###Syntax:\n",
        "SELECT expression1, expression2, ... expression_n\n",
        "\n",
        "FROM tables\n",
        "\n",
        "[WHERE conditions]\n",
        "\n",
        "UNION [DISTINCT]\n",
        "\n",
        "SELECT expression1, expression2, ... expression_n\n",
        "\n",
        "FROM tables\n",
        "\n",
        "[WHERE conditions];\n",
        "\n",
        "###Parameters or Arguments\n",
        "expression1, expression2, ... expression_n\n",
        "\n",
        "The columns or calculations that you wish to retrieve.\n",
        "\n",
        "tables\n",
        "\n",
        "The tables that you wish to retrieve records from. There must be at least one table listed in the FROM clause.\n",
        "\n",
        "WHERE conditions\n",
        "\n",
        "Optional. The conditions that must be met for the records to be selected.\n",
        "\n",
        "DISTINCT\n",
        "\n",
        "Optional. Removes duplicates from the result set, but the inclusion of the DISTINCT modifier has no impact on \n",
        "the result set of the UNION operator because, by default, the UNION operator already removes duplicates."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O5a9kdIhHQnj"
      },
      "source": [
        "#EXAMPLE:\n",
        "SELECT supplier_id\n",
        "FROM suppliers\n",
        "UNION\n",
        "SELECT supplier_id\n",
        "FROM order_details;\n",
        "\n",
        "#   In this MySQL UNION operator example, if a supplier_id appeared in both the suppliers and order_details table, \n",
        "#   it would appear once in your result set. The MySQL UNION operator removes duplicates. \n",
        "#   If you do not wish to remove duplicates, try using the MySQL UNION ALL operator.\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}